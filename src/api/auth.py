# –ò–º–ø–æ—Ä—Ç—ã FastAPI
from fastapi import APIRouter, Response

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –∏–∑–≤–ª–µ–∫–∞—é—Ç user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ë–î
from src.api.dependencies import UserIdDep, DBDep
from src.exceptions import (
    EmailNotRegisteredException,
    EmailNotRegisteredHTTPException,
    IncorrectPasswordException,
    IncorrectPasswordHTTPException,
    UserAlreadyExistsException,
    UserEmailAlreadyExistsHTTPException,
)

# Pydantic-—Å—Ö–µ–º—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)
from src.schemas.users import UserRequestAdd

# –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ –∏ JWT
from src.services.auth import AuthService

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä —Å –±–∞–∑–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
router = APIRouter(prefix="/auth", tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])


@router.post("/login")
async def login_user(
    data: UserRequestAdd,  # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email –∏ –ø–∞—Ä–æ–ª—å)
    response: Response,  # –û—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookie
    db: DBDep,  # –î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ö–µ—à –ø–∞—Ä–æ–ª—è
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –≤ cookie

    :param data: email –∏ –ø–∞—Ä–æ–ª—å
    :param response: HTTP-–æ—Ç–≤–µ—Ç (–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie)
    :param db: –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :raises HTTPException: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
    :return: access_token
    """
    try:
        access_token = await AuthService(db).login_user(data)
    except EmailNotRegisteredException:
        raise EmailNotRegisteredHTTPException
    except IncorrectPasswordException:
        raise IncorrectPasswordHTTPException

    response.set_cookie("access_token", access_token)
    return {"access_token": access_token}


@router.post("/register")
async def register_user(
    data: UserRequestAdd,  # email –∏ –ø–∞—Ä–æ–ª—å
    db: DBDep,
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    - –•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å
    - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –µ—Å–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    :param data: email –∏ –ø–∞—Ä–æ–ª—å
    :param db: –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :raises HTTPException: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    :return: —Å—Ç–∞—Ç—É—Å OK
    """
    try:
        await AuthService(db).register_user(data)
    except UserAlreadyExistsException:
        raise UserEmailAlreadyExistsHTTPException

    return {"status": "OK"}


@router.get("/me", summary="üë®‚Äçüíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def get_me(
    user_id: UserIdDep,  # user_id –±–µ—Ä–µ—Ç—Å—è –∏–∑ JWT
    db: DBDep,
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ JWT.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏–∑ —Ç–æ–∫–µ–Ω–∞
    :param db: –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :return: –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    return await AuthService(db).get_one_or_none(user_id)


@router.post("/logout")
async def logout_user(response: Response):
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    - –£–¥–∞–ª—è–µ—Ç access_token –∏–∑ cookie

    :param response: HTTP-–æ—Ç–≤–µ—Ç
    :return: —Å—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞
    """
    response.delete_cookie(key="access_token")
    return {"status": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}
