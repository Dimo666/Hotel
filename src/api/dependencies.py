from typing import Annotated
from fastapi import Depends, Query, Request
from pydantic import BaseModel

from src.database import async_session_maker
from src.exceptions import IncorrectTokenHTTPException, IncorrectTokenException, NoAccessTokenHTTPException
from src.services.auth import AuthService
from src.utils.db_manager import DBManager


# ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å—è—Ç—Å—è –∏–∑ query (?page=1&per_page=20)
class PaginationParams(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    - page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –º–∏–Ω–∏–º—É–º 1)
    - per_page: —Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –º–∞–∫—Å–∏–º—É–º 30)
    """

    page: Annotated[int | None, Query(1, ge=1)]
    per_page: Annotated[int | None, Query(None, ge=1, lt=30)]


# üëá –¢–∏–ø-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ —Ä—É—á–∫–∏ FastAPI
PaginationDep = Annotated[PaginationParams, Depends()]


# üîê –ü–æ–ª—É—á–µ–Ω–∏–µ access_token –∏–∑ cookie
def get_token(request: Request) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ cookies.

    :raises HTTPException: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    :return: —Å—Ç—Ä–æ–∫–∞ —Ç–æ–∫–µ–Ω–∞
    """
    token = request.cookies.get("access_token", None)
    if not token:
        raise NoAccessTokenHTTPException
    return token


# üîì –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id
def get_current_user_id(token: str = Depends(get_token)) -> int:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç access_token –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ payload.

    :param token: JWT —Ç–æ–∫–µ–Ω –∏–∑ cookie
    :return: user_id (int)
    """
    try:
        data = AuthService().decode_token(token)
    except IncorrectTokenException:
        raise IncorrectTokenHTTPException
    return data["user_id"]


# ‚úÖ –¢–∏–ø-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: user_id, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏–∑ —Ç–æ–∫–µ–Ω–∞
UserIdDep = Annotated[int, Depends(get_current_user_id)]


# üóÑÔ∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
async def get_db():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–≤–∏—Å–∏–º—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ Depends(), —á—Ç–æ–±—ã –≤–Ω—É—Ç—Ä–∏ —Ä—É—á–µ–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫:
    db.users, db.hotels, db.rooms –∏ —Ç.–¥.

    :yield: DBManager (–≤–Ω—É—Ç—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Å—Å–∏—è)
    """
    async with DBManager(session_factory=async_session_maker) as db:
        yield db


# üíæ –¢–∏–ø-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ DBManager
DBDep = Annotated[DBManager, Depends(get_db)]
