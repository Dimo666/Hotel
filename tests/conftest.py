import json
from unittest import mock

# –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Å—Ç–∞—Ö, –ø–æ–¥–º–µ–Ω—è—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä fastapi_cache.decorator.cache –Ω–∞ –ø—É—Å—Ç–æ–π
# lambda-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
# –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫—ç—à –Ω–µ –≤–ª–∏—è–ª –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤.
mock.patch(
    "fastapi_cache.decorator.cache",  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π –ø—É—Ç—å –∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–º–æ–∫–∞—Ç—å
    lambda *args, **kwargs: lambda f: f  # –ü–æ–¥–º–µ–Ω–∞: –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
).start()  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ç—á —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ


import pytest
from httpx import AsyncClient


# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
from src.api.dependencies import get_db
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MODE
from src.config import settings
# SQLAlchemy: –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏ –¥–≤–∏–∂–æ–∫ –±–µ–∑ connection pool (NullPool –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
from src.database import Base, engine_null_pool, async_session_maker_null_pool
# –ò–º–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
from src.main import app
# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π (—á—Ç–æ–±—ã Base.metadata –∑–Ω–∞–ª–∞ –æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö)
from src.models import *
# –°—Ö–µ–º—ã –¥–ª—è –æ—Ç–µ–ª–µ–π –∏ –Ω–æ–º–µ—Ä–æ–≤
from src.schemas.hotels import HotelAdd
from src.schemas.rooms import RoomAdd
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
from src.utils.db_manager import DBManager


# ‚õî –§–∏–∫—Å—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–µ—Å—Ç—ã –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MODE=TEST)
@pytest.fixture(scope="session", autouse=True)
def check_test_mode():
    assert settings.MODE == "TEST"


# üì¶ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ get_db, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
async def get_db_null_pool():
    async with DBManager(session_factory=async_session_maker_null_pool) as db:
        yield db


# üì¶ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
@pytest.fixture(scope="function")
async def db() -> DBManager:
    async for db in get_db_null_pool():
        yield db


# ‚õìÔ∏è –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å get_db –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
app.dependency_overrides[get_db] = get_db_null_pool


# üõ†Ô∏è –§–∏–∫—Å—Ç—É—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:
# - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã,
# - —Å–æ–∑–¥–∞—ë—Ç –∑–∞–Ω–æ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î,
# - –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JSON
@pytest.fixture(scope="session", autouse=True)
async def setup_database(check_test_mode):
    async with engine_null_pool.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)   # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        await conn.run_sync(Base.metadata.create_all) # –°–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ —Ç–∞–±–ª–∏—Ü—ã

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open("tests/mock_hotels.json", encoding="utf-8") as file_hotels:
        hotels = json.load(file_hotels)
    with open("tests/mock_rooms.json", encoding="utf-8") as file_rooms:
        rooms = json.load(file_rooms)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ Pydantic-—Å—Ö–µ–º—ã
    hotels = [HotelAdd.model_validate(hotel) for hotel in hotels]
    rooms = [RoomAdd.model_validate(room) for room in rooms]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
    async with DBManager(session_factory=async_session_maker_null_pool) as db_:
        await db_.hotels.add_bulk(hotels)
        await db_.rooms.add_bulk(rooms)
        await db_.commit()


# üåê –§–∏–∫—Å—Ç—É—Ä–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —á–µ—Ä–µ–∑ httpx
@pytest.fixture(scope="session")
async def ac() -> AsyncClient:
    async with AsyncClient(app=app, base_url="http://test") as ac:
        yield ac


# üîê –§–∏–∫—Å—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏, –≥–¥–µ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@pytest.fixture(scope="session", autouse=True)
async def register_user(ac, setup_database):
    await ac.post(
        "/auth/register",
        json={
            "email": "kot@pes.com",
            "password": "1234"
        }
    )

@pytest.fixture(scope="session")
async def authenticated_ac(ac: AsyncClient, register_user) -> AsyncClient:
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥: –ø–æ–ª—É—á–∞–µ–º access_token
    response = await ac.post(
        "/auth/login",
        json={
            "email": "kot@pes.com",
            "password": "1234"
        }
    )
    assert response.status_code == 200
    access_token = response.json()["access_token"]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    ac.headers.update({"Authorization": f"Bearer {access_token}"})

    yield ac
