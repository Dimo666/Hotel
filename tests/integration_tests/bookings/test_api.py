# ‚úÖ –¢–µ—Å—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
import pytest
from sqlalchemy import delete
from src.models import BookingsOrm as BookingModel



# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—é: —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
@pytest.mark.parametrize("room_id, date_from, date_to, status_code", [
    # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç-–∫–µ–π—Å
    (1, "2024-08-01", "2024-08-10", 200),  # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ
    (1, "2024-08-02", "2024-08-11", 200),
    (1, "2024-08-03", "2024-08-12", 200),
    (1, "2024-08-04", "2024-08-13", 200),
    (1, "2024-08-05", "2024-08-14", 200),
    (1, "2024-08-06", "2024-08-15", 500),  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∞—Ç)
    (1, "2024-08-17", "2024-08-25", 200),
])
async def test_add_booking(
        room_id, date_from, date_to, status_code,  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
        db, authenticated_ac                       # –§–∏–∫—Å—Ç—É—Ä—ã: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç /bookings
    # room_id = (await db.rooms.get_all())[0].id
    response = await authenticated_ac.post(
        "/bookings",
        json={
            "room_id": room_id,      # –ö–æ–º–Ω–∞—Ç–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
            "date_from": date_from,  # –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            "date_to": date_to       # –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
    assert response.status_code == status_code

    # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    if status_code == 200:
        res = response.json()
        assert isinstance(res, dict)          # –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        assert res["status"] == "OK"          # –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å OK
        assert "data" in res                  # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏


@pytest.fixture(scope="function")
async def delete_all_bookings(db):
    await db.session.execute(delete(BookingModel))
    await db.commit()


@pytest.mark.parametrize("room_id, date_from, date_to, expected_count", [
    (1, "2024-08-01", "2024-08-05", 1),
    (1, "2024-08-10", "2024-08-12", 1),
    (1, "2024-08-15", "2024-08-18", 1),
])
async def test_add_and_get_bookings(
    room_id, date_from, date_to, expected_count,
    db, authenticated_ac, delete_all_bookings
):
    # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    response = await authenticated_ac.post("/bookings", json={
        "room_id": room_id,
        "date_from": date_from,
        "date_to": date_to
    })
    assert response.status_code == 200

    # üì• –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    me_response = await authenticated_ac.get("/bookings/me")
    assert me_response.status_code == 200
    me_data = me_response.json()
    assert me_data["status"] == "OK"
    assert len(me_data["data"]) == expected_count
